import { deadlineEngine, DeadlineCalculation, DeadlineRule } from './deadline-engine';
import { workflowEngine } from './workflow-engine';

export interface TaskSequence {
  id: string;
  deadlineId: string;
  name: string;
  description: string;
  totalEstimatedHours: number;
  phases: TaskPhase[];
  dependencies: TaskDependency[];
  milestones: TaskMilestone[];
  riskFactors: RiskFactor[];
  autoGenerated: boolean;
  createdAt: Date;
  updatedAt: Date;
}

export interface TaskPhase {
  id: string;
  name: string;
  description: string;
  startOffset: number; // days before deadline
  duration: number; // days
  priority: 'low' | 'medium' | 'high' | 'critical';
  estimatedHours: number;
  tasks: SequenceTask[];
  prerequisites: string[]; // phase IDs that must complete first
  deliverables: string[];
}

export interface SequenceTask {
  id: string;
  title: string;
  description: string;
  estimatedHours: number;
  priority: 'low' | 'medium' | 'high' | 'urgent';
  tags: string[];
  dependencies: string[]; // task IDs this depends on
  skillsRequired: string[];
  resources: string[];
  checklistItems: string[];
  dueOffset: number; // hours before phase end
}

export interface TaskDependency {
  id: string;
  prerequisiteTaskId: string;
  dependentTaskId: string;
  type: 'finish_to_start' | 'start_to_start' | 'finish_to_finish' | 'start_to_finish';
  lag: number; // hours
}

export interface TaskMilestone {
  id: string;
  name: string;
  description: string;
  offset: number; // days before deadline
  criteria: string[];
  autoCheck: boolean;
}

export interface RiskFactor {
  id: string;
  name: string;
  description: string;
  probability: number; // 0-1
  impact: 'low' | 'medium' | 'high' | 'critical';
  mitigation: string;
  earlyWarningDays: number;
}

// Pre-defined sequence templates for common legal deadlines
const SEQUENCE_TEMPLATES: Record<string, TaskSequence> = {
  'federal-motion-response': {
    id: 'federal-motion-response',
    deadlineId: '',
    name: 'Federal Motion Response Sequence',
    description: 'Complete task sequence for responding to federal court motions',
    totalEstimatedHours: 16,
    phases: [
      {
        id: 'research-phase',
        name: 'Research & Analysis',
        description: 'Initial case research and legal analysis',
        startOffset: 18, // 18 days before deadline
        duration: 5,
        priority: 'medium',
        estimatedHours: 6,
        tasks: [
          {
            id: 'review-motion',
            title: 'Review opposing motion thoroughly',
            description: 'Analyze the motion, supporting documents, and legal arguments',
            estimatedHours: 2,
            priority: 'high',
            tags: ['review', 'analysis'],
            dependencies: [],
            skillsRequired: ['legal-analysis'],
            resources: ['motion-documents'],
            checklistItems: [
              'Read motion completely',
              'Identify key legal arguments',
              'Note factual assertions',
              'Review supporting exhibits',
              'Identify response deadline'
            ],
            dueOffset: 0
          },
          {
            id: 'research-law',
            title: 'Research applicable law and precedents',
            description: 'Research relevant statutes, case law, and precedents',
            estimatedHours: 4,
            priority: 'high',
            tags: ['research', 'case-law'],
            dependencies: ['review-motion'],
            skillsRequired: ['legal-research'],
            resources: ['westlaw', 'lexis'],
            checklistItems: [
              'Research relevant statutes',
              'Find supporting case law',
              'Identify distinguishing cases',
              'Review recent precedents',
              'Compile research notes'
            ],
            dueOffset: 2
          }
        ],
        prerequisites: [],
        deliverables: ['Research memo', 'Case law compilation']
      },
      {
        id: 'drafting-phase',
        name: 'Drafting & Preparation',
        description: 'Draft response and supporting documents',
        startOffset: 12,
        duration: 7,
        priority: 'high',
        estimatedHours: 8,
        tasks: [
          {
            id: 'draft-response',
            title: 'Draft initial response brief',
            description: 'Create first draft of motion response',
            estimatedHours: 5,
            priority: 'high',
            tags: ['drafting', 'brief'],
            dependencies: ['research-law'],
            skillsRequired: ['legal-writing'],
            resources: ['research-memo'],
            checklistItems: [
              'Create outline',
              'Draft introduction',
              'Write argument sections',
              'Include legal citations',
              'Prepare conclusion'
            ],
            dueOffset: 4
          },
          {
            id: 'prepare-exhibits',
            title: 'Prepare supporting exhibits',
            description: 'Gather and organize supporting documents',
            estimatedHours: 2,
            priority: 'medium',
            tags: ['exhibits', 'documentation'],
            dependencies: ['draft-response'],
            skillsRequired: ['document-preparation'],
            resources: ['case-files'],
            checklistItems: [
              'Identify supporting documents',
              'Create exhibit list',
              'Organize exhibits by relevance',
              'Prepare exhibit index',
              'Review for privilege issues'
            ],
            dueOffset: 2
          },
          {
            id: 'cite-check',
            title: 'Citation check and legal verification',
            description: 'Verify all citations and legal references',
            estimatedHours: 1,
            priority: 'medium',
            tags: ['cite-check', 'verification'],
            dependencies: ['draft-response'],
            skillsRequired: ['cite-checking'],
            resources: ['bluebook'],
            checklistItems: [
              'Verify case citations',
              'Check statute references',
              'Confirm quotation accuracy',
              'Review citation format',
              'Cross-reference authorities'
            ],
            dueOffset: 1
          }
        ],
        prerequisites: ['research-phase'],
        deliverables: ['Response brief draft', 'Supporting exhibits']
      },
      {
        id: 'review-finalize-phase',
        name: 'Review & Finalization',
        description: 'Final review, revisions, and filing preparation',
        startOffset: 4,
        duration: 3,
        priority: 'high',
        estimatedHours: 2,
        tasks: [
          {
            id: 'senior-review',
            title: 'Senior attorney review',
            description: 'Have senior attorney review response',
            estimatedHours: 1,
            priority: 'urgent',
            tags: ['review', 'quality-control'],
            dependencies: ['cite-check'],
            skillsRequired: ['senior-review'],
            resources: ['completed-draft'],
            checklistItems: [
              'Schedule review meeting',
              'Incorporate feedback',
              'Address legal concerns',
              'Finalize arguments',
              'Approve for filing'
            ],
            dueOffset: 2
          },
          {
            id: 'final-formatting',
            title: 'Final formatting and filing preparation',
            description: 'Format document for filing and prepare filing package',
            estimatedHours: 1,
            priority: 'high',
            tags: ['formatting', 'filing'],
            dependencies: ['senior-review'],
            skillsRequired: ['document-formatting'],
            resources: ['court-rules'],
            checklistItems: [
              'Apply court formatting rules',
              'Prepare signature page',
              'Create filing cover sheet',
              'Prepare service list',
              'Generate PDF for e-filing'
            ],
            dueOffset: 0
          }
        ],
        prerequisites: ['drafting-phase'],
        deliverables: ['Final response brief', 'Filing package']
      }
    ],
    dependencies: [
      {
        id: 'dep-1',
        prerequisiteTaskId: 'review-motion',
        dependentTaskId: 'research-law',
        type: 'finish_to_start',
        lag: 0
      },
      {
        id: 'dep-2',
        prerequisiteTaskId: 'research-law',
        dependentTaskId: 'draft-response',
        type: 'finish_to_start',
        lag: 2
      }
    ],
    milestones: [
      {
        id: 'research-complete',
        name: 'Research Phase Complete',
        description: 'All research and analysis completed',
        offset: 13,
        criteria: ['Research memo approved', 'Case law compiled'],
        autoCheck: false
      },
      {
        id: 'draft-complete',
        name: 'Draft Complete',
        description: 'Initial draft completed and ready for review',
        offset: 5,
        criteria: ['Response drafted', 'Exhibits prepared', 'Citations checked'],
        autoCheck: false
      },
      {
        id: 'ready-to-file',
        name: 'Ready to File',
        description: 'Response is finalized and ready for filing',
        offset: 1,
        criteria: ['Senior review complete', 'Document formatted', 'Filing package prepared'],
        autoCheck: false
      }
    ],
    riskFactors: [
      {
        id: 'complex-legal-issues',
        name: 'Complex Legal Issues',
        description: 'Motion involves complex or novel legal issues',
        probability: 0.3,
        impact: 'high',
        mitigation: 'Add extra research time and consult specialist',
        earlyWarningDays: 15
      },
      {
        id: 'missing-documents',
        name: 'Missing Supporting Documents',
        description: 'Required documents may not be readily available',
        probability: 0.2,
        impact: 'medium',
        mitigation: 'Start document gathering early',
        earlyWarningDays: 10
      }
    ],
    autoGenerated: true,
    createdAt: new Date(),
    updatedAt: new Date()
  },

  'discovery-response': {
    id: 'discovery-response',
    deadlineId: '',
    name: 'Discovery Response Sequence',
    description: 'Complete sequence for responding to discovery requests',
    totalEstimatedHours: 12,
    phases: [
      {
        id: 'review-requests',
        name: 'Review & Planning',
        description: 'Review discovery requests and plan response strategy',
        startOffset: 25,
        duration: 3,
        priority: 'medium',
        estimatedHours: 3,
        tasks: [
          {
            id: 'analyze-requests',
            title: 'Analyze discovery requests',
            description: 'Review all discovery requests for scope and objections',
            estimatedHours: 2,
            priority: 'high',
            tags: ['discovery', 'analysis'],
            dependencies: [],
            skillsRequired: ['discovery-analysis'],
            resources: ['discovery-requests'],
            checklistItems: [
              'Review each request carefully',
              'Identify overly broad requests',
              'Note privilege issues',
              'Plan objection strategy',
              'Estimate response effort'
            ],
            dueOffset: 1
          },
          {
            id: 'create-response-plan',
            title: 'Create response plan and timeline',
            description: 'Develop strategy and timeline for responses',
            estimatedHours: 1,
            priority: 'medium',
            tags: ['planning', 'strategy'],
            dependencies: ['analyze-requests'],
            skillsRequired: ['project-planning'],
            resources: ['analysis-notes'],
            checklistItems: [
              'Prioritize requests',
              'Assign team members',
              'Set internal deadlines',
              'Plan document collection',
              'Schedule client meetings'
            ],
            dueOffset: 0
          }
        ],
        prerequisites: [],
        deliverables: ['Response strategy', 'Work plan']
      },
      {
        id: 'gather-documents',
        name: 'Document Collection',
        description: 'Gather and review responsive documents',
        startOffset: 20,
        duration: 10,
        priority: 'high',
        estimatedHours: 6,
        tasks: [
          {
            id: 'collect-documents',
            title: 'Collect responsive documents',
            description: 'Gather documents from client and internal files',
            estimatedHours: 3,
            priority: 'high',
            tags: ['document-collection'],
            dependencies: ['create-response-plan'],
            skillsRequired: ['document-management'],
            resources: ['client-files'],
            checklistItems: [
              'Request documents from client',
              'Search internal files',
              'Coordinate with client personnel',
              'Organize documents by request',
              'Log document collection progress'
            ],
            dueOffset: 5
          },
          {
            id: 'review-privilege',
            title: 'Privilege review',
            description: 'Review documents for privilege and work product',
            estimatedHours: 3,
            priority: 'urgent',
            tags: ['privilege', 'review'],
            dependencies: ['collect-documents'],
            skillsRequired: ['privilege-review'],
            resources: ['collected-documents'],
            checklistItems: [
              'Review each document for privilege',
              'Create privilege log',
              'Redact privileged information',
              'Flag work product materials',
              'Prepare protective designations'
            ],
            dueOffset: 2
          }
        ],
        prerequisites: ['review-requests'],
        deliverables: ['Document collection', 'Privilege log']
      },
      {
        id: 'prepare-responses',
        name: 'Response Preparation',
        description: 'Prepare written responses and objections',
        startOffset: 8,
        duration: 6,
        priority: 'critical',
        estimatedHours: 3,
        tasks: [
          {
            id: 'draft-responses',
            title: 'Draft written responses',
            description: 'Draft responses to each discovery request',
            estimatedHours: 2,
            priority: 'high',
            tags: ['drafting', 'responses'],
            dependencies: ['review-privilege'],
            skillsRequired: ['discovery-drafting'],
            resources: ['reviewed-documents'],
            checklistItems: [
              'Draft response to each request',
              'Include appropriate objections',
              'Reference supporting documents',
              'Ensure completeness',
              'Review for accuracy'
            ],
            dueOffset: 2
          },
          {
            id: 'finalize-production',
            title: 'Finalize document production',
            description: 'Prepare final document production set',
            estimatedHours: 1,
            priority: 'high',
            tags: ['production', 'finalization'],
            dependencies: ['draft-responses'],
            skillsRequired: ['document-production'],
            resources: ['response-drafts'],
            checklistItems: [
              'Finalize document numbering',
              'Prepare production index',
              'Create electronic production',
              'Verify all documents included',
              'Prepare transmittal letter'
            ],
            dueOffset: 0
          }
        ],
        prerequisites: ['gather-documents'],
        deliverables: ['Written responses', 'Document production']
      }
    ],
    dependencies: [],
    milestones: [
      {
        id: 'strategy-set',
        name: 'Response Strategy Set',
        description: 'Strategy and plan finalized',
        offset: 22,
        criteria: ['Requests analyzed', 'Response plan created'],
        autoCheck: false
      },
      {
        id: 'documents-ready',
        name: 'Documents Ready',
        description: 'All documents collected and reviewed',
        offset: 10,
        criteria: ['Documents collected', 'Privilege review complete'],
        autoCheck: false
      }
    ],
    riskFactors: [
      {
        id: 'large-document-volume',
        name: 'Large Document Volume',
        description: 'Discovery requests may produce large volume of documents',
        probability: 0.4,
        impact: 'high',
        mitigation: 'Start document collection early and use technology tools',
        earlyWarningDays: 20
      }
    ],
    autoGenerated: true,
    createdAt: new Date(),
    updatedAt: new Date()
  }
};

export class DeadlineTaskSequenceEngine {
  
  /**
   * Generate task sequence for a given deadline
   */
  async generateTaskSequence(
    deadlineCalc: DeadlineCalculation,
    complexity: 'simple' | 'moderate' | 'complex' = 'moderate',
    customOptions?: Partial<TaskSequence>
  ): Promise<TaskSequence> {
    
    // Determine appropriate template based on deadline type and jurisdiction
    const template = this.selectTemplate(deadlineCalc, complexity);
    
    // Customize template for specific deadline
    const sequence = this.customizeTemplate(template, deadlineCalc, customOptions);
    
    // Validate and adjust timeline
    this.validateTimeline(sequence, deadlineCalc);
    
    // Create tasks in workflow system
    await this.createSequenceTasks(sequence);
    
    return sequence;
  }
  
  /**
   * Select appropriate template based on deadline characteristics
   */
  private selectTemplate(deadlineCalc: DeadlineCalculation, complexity: string): TaskSequence {
    const ruleType = deadlineCalc.ruleApplied.type;
    const jurisdiction = deadlineCalc.jurisdiction;
    
    // Select template based on deadline type
    if (ruleType === 'response' && jurisdiction === 'federal') {
      return SEQUENCE_TEMPLATES['federal-motion-response'];
    } else if (ruleType === 'discovery') {
      return SEQUENCE_TEMPLATES['discovery-response'];
    }
    
    // Default to motion response template
    return SEQUENCE_TEMPLATES['federal-motion-response'];
  }
  
  /**
   * Customize template for specific deadline
   */
  private customizeTemplate(
    template: TaskSequence,
    deadlineCalc: DeadlineCalculation,
    customOptions?: Partial<TaskSequence>
  ): TaskSequence {
    
    const sequence: TaskSequence = {
      ...template,
      id: `seq_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      deadlineId: `deadline_${deadlineCalc.ruleApplied.id}`,
      ...customOptions,
      updatedAt: new Date()
    };
    
    // Adjust timeline based on actual deadline
    sequence.phases = sequence.phases.map(phase => ({
      ...phase,
      // Adjust phase timing based on preparation time available
      startOffset: Math.min(phase.startOffset, deadlineCalc.preparationTime + 5),
      tasks: phase.tasks.map(task => ({
        ...task,
        id: `task_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
      }))
    }));
    
    return sequence;
  }
  
  /**
   * Validate timeline and adjust if necessary
   */
  private validateTimeline(sequence: TaskSequence, deadlineCalc: DeadlineCalculation): void {
    const totalDaysNeeded = Math.max(...sequence.phases.map(p => p.startOffset));
    const daysAvailable = Math.floor((deadlineCalc.deadline.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));
    
    if (totalDaysNeeded > daysAvailable) {
      // Compress timeline if needed
      const compressionFactor = daysAvailable / totalDaysNeeded;
      sequence.phases.forEach(phase => {
        phase.startOffset = Math.floor(phase.startOffset * compressionFactor);
        phase.duration = Math.max(1, Math.floor(phase.duration * compressionFactor));
      });
    }
  }
  
  /**
   * Create actual tasks in the workflow system
   */
  private async createSequenceTasks(sequence: TaskSequence): Promise<void> {
    for (const phase of sequence.phases) {
      for (const task of phase.tasks) {
        const taskData = {
          sequence_id: sequence.id,
          phase_id: phase.id,
          task_title: task.title,
          task_description: task.description,
          estimated_hours: task.estimatedHours,
          priority: task.priority,
          tags: task.tags,
          checklist_items: task.checklistItems,
          due_offset_hours: task.dueOffset,
          dependencies: task.dependencies
        };
        
        await workflowEngine.executeWorkflow('deadline-sequence-task-creation', JSON.stringify(taskData));
      }
    }
  }
  
  /**
   * Monitor sequence progress and adjust as needed
   */
  async monitorSequenceProgress(sequenceId: string): Promise<{
    overallProgress: number;
    phaseProgress: { phaseId: string; progress: number }[];
    risks: RiskFactor[];
    recommendations: string[];
  }> {
    
    // In real implementation, this would query task completion status
    // For now, return mock data
    return {
      overallProgress: 0.3,
      phaseProgress: [
        { phaseId: 'research-phase', progress: 0.8 },
        { phaseId: 'drafting-phase', progress: 0.2 },
        { phaseId: 'review-finalize-phase', progress: 0.0 }
      ],
      risks: [],
      recommendations: [
        'Research phase ahead of schedule - consider starting drafting early',
        'Schedule senior attorney review meeting now to avoid delays'
      ]
    };
  }
  
  /**
   * Generate risk assessment for sequence
   */
  generateRiskAssessment(sequence: TaskSequence, currentProgress: number): {
    riskLevel: 'low' | 'medium' | 'high' | 'critical';
    factors: RiskFactor[];
    mitigationPlan: string[];
  } {
    
    let overallRisk: 'low' | 'medium' | 'high' | 'critical' = 'low';
    const activeMitigations: string[] = [];
    
    // Analyze risk factors
    for (const risk of sequence.riskFactors) {
      if (risk.probability > 0.5 && risk.impact === 'critical') {
        overallRisk = 'critical';
        activeMitigations.push(risk.mitigation);
      } else if (risk.probability > 0.3 && risk.impact === 'high') {
        if (overallRisk !== 'critical') overallRisk = 'high';
        activeMitigations.push(risk.mitigation);
      }
    }
    
    // Factor in progress vs timeline
    const timeRemaining = this.calculateTimeRemaining(sequence);
    if (currentProgress < 0.5 && timeRemaining < 7) {
      overallRisk = overallRisk === 'low' ? 'medium' : 'high';
      activeMitigations.push('Consider working overtime or adding resources');
    }
    
    return {
      riskLevel: overallRisk,
      factors: sequence.riskFactors,
      mitigationPlan: activeMitigations
    };
  }
  
  /**
   * Calculate days remaining until deadline
   */
  private calculateTimeRemaining(sequence: TaskSequence): number {
    // In real implementation, would calculate based on actual deadline
    return 10; // Mock value
  }
  
  /**
   * Get available sequence templates
   */
  getAvailableTemplates(): Record<string, TaskSequence> {
    return SEQUENCE_TEMPLATES;
  }
  
  /**
   * Create custom sequence template
   */
  createCustomTemplate(template: TaskSequence): void {
    SEQUENCE_TEMPLATES[template.id] = template;
  }
  
  /**
   * Auto-generate sequences for upcoming deadlines
   */
  async autoGenerateSequences(days: number = 30): Promise<TaskSequence[]> {
    // This would integrate with the deadline engine to find upcoming deadlines
    // and automatically generate task sequences for them
    
    const sequences: TaskSequence[] = [];
    
    // Mock implementation - in real version would query deadline engine
    console.log(`Auto-generating task sequences for deadlines in next ${days} days`);
    
    return sequences;
  }
}

// Export singleton instance
export const deadlineTaskSequenceEngine = new DeadlineTaskSequenceEngine();

// Example usage and testing
export function testDeadlineTaskSequences() {
  const engine = new DeadlineTaskSequenceEngine();
  
  // Mock deadline calculation
  const mockDeadlineCalc: DeadlineCalculation = {
    originalDate: new Date(),
    deadline: new Date(Date.now() + 21 * 24 * 60 * 60 * 1000), // 21 days from now
    preparationTime: 14,
    alertDates: {
      warning90: new Date(),
      warning30: new Date(),
      warning7: new Date(),
      warning24h: new Date()
    },
    jurisdiction: 'federal',
    ruleApplied: {
      id: 'fed-civil-response',
      name: 'Federal Civil Response',
      jurisdiction: 'federal',
      type: 'response',
      baseDays: 21,
      excludeWeekends: true,
      excludeHolidays: true,
      businessDaysOnly: true
    },
    riskLevel: 'medium'
  };
  
  // Generate task sequence
  const sequence = engine.generateTaskSequence(mockDeadlineCalc, 'moderate');
  console.log('Generated task sequence:', sequence);
  
  // Monitor progress
  const progress = engine.monitorSequenceProgress('test-sequence');
  console.log('Sequence progress:', progress);
  
  return { engine, sequence, progress };
}
